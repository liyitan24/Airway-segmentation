import mindspore.nn as nn
import mindspore.ops as ops

def double_conv(in_channels, out_channels):
	# Use the defined operation to build a forward network.
        x = nn.Conv3d(in_channels, out_channels, 3, padding=1)
        x = nn.ReLU(x)
        x = nn.Conv3d(out_channels, out_channels, 3, padding=1)
        x = nn.ReLU(x)
        return x
       

class UNet(nn.Module):

    def __init__(self, n_class):
        super().__init__()
        #initialise downsample convolutional layers 1-4        
        self.dconv_down1 = double_conv(3, 64)
        self.dconv_down2 = double_conv(64, 128)
        self.dconv_down3 = double_conv(128, 256)
        self.dconv_down4 = double_conv(256, 512)        

	#initialise maxpool layer
        self.maxpool = nn.MaxPool2d(2)
	#initialise upsample layer
        self.upsample = nn.ResizeBilinear()        
        
	#initialise upsample convolutional layers 3-1
        self.dconv_up3 = double_conv(256 + 512, 256)
        self.dconv_up2 = double_conv(128 + 256, 128)
        self.dconv_up1 = double_conv(128 + 64, 64)
        
        self.conv_last = nn.Conv2d(64, n_class, 1)
        
        
    def forward(self, x):
	op = ops.Concat()

        conv1 = self.dconv_down1(x)
        x = self.maxpool(conv1)

        conv2 = self.dconv_down2(x)
        x = self.maxpool(conv2)
        
        conv3 = self.dconv_down3(x)
        x = self.maxpool(conv3)   
        
        x = self.dconv_down4(x)
        
        x = self.upsample(x)        
        x = ops.Concat([x, conv3], dim=1)
        
        x = self.dconv_up3(x)
        x = self.upsample(x)        
        x = ops.Concat([x, conv2], dim=1)       

        x = self.dconv_up2(x)
        x = self.upsample(x)        
        x = ops.Concat([x, conv1], dim=1)   
        
        x = self.dconv_up1(x)
        
        out = self.conv_last(x)
